{
  "language": "Solidity",
  "sources": {
    "contracts/Storms.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n//  __ _                      __    __ _           _\n// / _\\ |_ ___  _ __ _ __ ___/ / /\\ \\ (_)_ __   __| |___\n// \\ \\| __/ _ \\| '__| '_ ` _ \\ \\/  \\/ / | '_ \\ / _` / __|\n// _\\ \\ || (_) | |  | | | | | \\  /\\  /| | | | | (_| \\__ \\\n// \\__/\\__\\___/|_|  |_| |_| |_|\\/  \\/ |_|_| |_|\\__,_|___/\n// summoned by @msfeldstein\n//\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract Storms is Ownable {\n    address lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\n    address artifactAddress;\n\n    enum StormType {\n        FIRE,\n        SAND,\n        ICE,\n        WIND,\n        LIGHTNING\n    }\n    event StormBegins(StormType);\n    // The dates that the storms are active until\n    mapping(uint8 => uint256) activeStormMapping;\n\n    constructor(address _artifactAdress) {\n        artifactAddress = _artifactAdress;\n    }\n\n    function activeStorms()\n        external\n        view\n        returns (\n            bool, // fire\n            bool, // sand\n            bool, // ice\n            bool, // wind\n            bool // lightning\n        )\n    {\n        return (\n            activeStormMapping[uint8(StormType.FIRE)] > block.timestamp,\n            activeStormMapping[uint8(StormType.SAND)] > block.timestamp,\n            activeStormMapping[uint8(StormType.ICE)] > block.timestamp,\n            activeStormMapping[uint8(StormType.WIND)] > block.timestamp,\n            activeStormMapping[uint8(StormType.LIGHTNING)] > block.timestamp\n        );\n    }\n\n    function summon(StormType _storm, uint256 _endTime) external {\n        require(_endTime > block.timestamp);\n        activeStormMapping[uint8(_storm)] = _endTime;\n        emit StormBegins(_storm);\n    }\n\n    function pray(StormType _storm) external {\n        //sdfa\n    }\n\n    function withdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}